definitions:
  models.Category:
    properties:
      category_title:
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: string
      updated_at:
        type: string
    type: object
  models.CreateCategoryModel:
    properties:
      category_title:
        type: string
    type: object
  models.CreateOrderModel:
    properties:
      product_id:
        type: string
      quantity:
        type: integer
      user_address:
        type: string
      user_name:
        type: string
      user_phone:
        type: string
    type: object
  models.CreateProductModel:
    properties:
      category_id:
        type: string
      description:
        type: string
      price:
        type: string
      title:
        type: string
    required:
    - category_id
    type: object
  models.CreateUserModel:
    properties:
      password:
        type: string
      user_type:
        type: string
      username:
        type: string
    type: object
  models.JSONError:
    properties:
      error:
        type: string
    type: object
  models.JSONResult:
    properties:
      data: {}
      message:
        type: string
    type: object
  models.LoginModel:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  models.Order:
    properties:
      created_at:
        type: string
      id:
        type: string
      product_id:
        type: string
      quantity:
        type: integer
      user_address:
        type: string
      user_name:
        type: string
      user_phone:
        type: string
    type: object
  models.PackedOrderModel:
    properties:
      created_at:
        type: string
      id:
        type: string
      product:
        $ref: '#/definitions/models.Product'
      product_id:
        type: string
      quantity:
        type: integer
      user_address:
        type: string
      user_name:
        type: string
      user_phone:
        type: string
    type: object
  models.Product:
    properties:
      category_id:
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      description:
        type: string
      id:
        type: string
      price:
        type: string
      title:
        type: string
      updated_at:
        type: string
    required:
    - category_id
    type: object
  models.TokenResponse:
    properties:
      token:
        type: string
    type: object
  models.UpdateCategoryModel:
    properties:
      category_title:
        type: string
      id:
        type: string
    required:
    - id
    type: object
  models.UpdateProductModel:
    properties:
      id:
        type: string
      price:
        type: string
      title:
        type: string
    required:
    - id
    type: object
  models.UpdateUserModel:
    properties:
      id:
        type: string
      password:
        type: string
    required:
    - id
    type: object
  models.User:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: string
      password:
        type: string
      updated_at:
        type: string
      user_type:
        type: string
      username:
        type: string
    type: object
info:
  contact: {}
paths:
  /v1/category:
    get:
      consumes:
      - application/json
      description: get categories
      parameters:
      - description: "0"
        in: query
        name: offset
        type: string
      - description: "10"
        in: query
        name: limit
        type: string
      - description: smth
        in: query
        name: search
        type: string
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResult'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Category'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.JSONError'
      summary: List categories
      tags:
      - categories
    post:
      consumes:
      - application/json
      description: create new category
      parameters:
      - description: Category body
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/models.CreateCategoryModel'
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/models.Category'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.JSONError'
      summary: Create category
      tags:
      - categories
    put:
      consumes:
      - application/json
      description: update category
      parameters:
      - description: Category body
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/models.UpdateCategoryModel'
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/models.Category'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.JSONError'
      summary: Update category
      tags:
      - categories
  /v1/category/{id}:
    delete:
      consumes:
      - application/json
      description: delete category by ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/models.Category'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONError'
      summary: Delete category
      tags:
      - categories
    get:
      consumes:
      - application/json
      description: get category by ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/models.Category'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.JSONError'
      summary: Get category
      tags:
      - categories
  /v1/login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: Login body
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/models.LoginModel'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/models.TokenResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONError'
      summary: Login
      tags:
      - auth
  /v1/order:
    get:
      consumes:
      - application/json
      description: get orders
      parameters:
      - description: "0"
        in: query
        name: offset
        type: string
      - description: "10"
        in: query
        name: limit
        type: string
      - description: smth
        in: query
        name: search
        type: string
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResult'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Order'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.JSONError'
      summary: List orders
      tags:
      - orders
    post:
      consumes:
      - application/json
      description: create new order
      parameters:
      - description: Order body
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/models.CreateOrderModel'
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/models.Order'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.JSONError'
      summary: Create order
      tags:
      - orders
  /v1/order/{id}:
    get:
      consumes:
      - application/json
      description: get order by ID
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/models.PackedOrderModel'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.JSONError'
      summary: Get order
      tags:
      - orders
  /v1/product:
    get:
      consumes:
      - application/json
      description: get products
      parameters:
      - description: "0"
        in: query
        name: offset
        type: string
      - description: "10"
        in: query
        name: limit
        type: string
      - description: smth
        in: query
        name: search
        type: string
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResult'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Product'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.JSONError'
      summary: List products
      tags:
      - products
    post:
      consumes:
      - application/json
      description: create new product
      parameters:
      - description: Product body
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/models.CreateProductModel'
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/models.Product'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.JSONError'
      summary: Create product
      tags:
      - products
    put:
      consumes:
      - application/json
      description: update product
      parameters:
      - description: Product body
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/models.UpdateProductModel'
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/models.Product'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.JSONError'
      summary: Update product
      tags:
      - products
  /v1/product/{id}:
    delete:
      consumes:
      - application/json
      description: delete product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/models.Product'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONError'
      summary: Delete product
      tags:
      - products
    get:
      consumes:
      - application/json
      description: get product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/models.Product'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.JSONError'
      summary: Get product
      tags:
      - products
  /v1/user:
    get:
      consumes:
      - application/json
      description: get users
      parameters:
      - description: "0"
        in: query
        name: offset
        type: string
      - description: "10"
        in: query
        name: limit
        type: string
      - description: smth
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResult'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.User'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.JSONError'
      summary: List users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: create new user
      parameters:
      - description: User body
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserModel'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.JSONError'
      summary: Create user
      tags:
      - users
    put:
      consumes:
      - application/json
      description: update user
      parameters:
      - description: User body
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.JSONError'
      summary: Update user
      tags:
      - users
  /v1/user/{id}:
    delete:
      consumes:
      - application/json
      description: delete user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONError'
      summary: Delete user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: get user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.JSONError'
      summary: Get user
      tags:
      - users
swagger: "2.0"
