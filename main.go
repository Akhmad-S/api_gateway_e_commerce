package main

import (
	"log"
	"net/http"

	"github.com/gin-gonic/gin"
	swaggerFiles "github.com/swaggo/files"     // swagger embed files
	ginSwagger "github.com/swaggo/gin-swagger" // gin-swagger middleware

	"github.com/uacademy/e_commerce/api_gateway/clients"
	"github.com/uacademy/e_commerce/api_gateway/config"
	"github.com/uacademy/e_commerce/api_gateway/docs" // docs is generated by Swag CLI, you have to import it.
	"github.com/uacademy/e_commerce/api_gateway/handlers"
)

func main() {
	cfg := config.Load()

	if cfg.Environment != "development" {
		gin.SetMode(gin.ReleaseMode)
	}

	// programmatically set swagger info
	docs.SwaggerInfo.Title = cfg.App
	docs.SwaggerInfo.Version = cfg.AppVersion

	r := gin.New()
	r.Use(gin.Logger(), gin.Recovery()) // Later they will be replaced by custom Logger and Recovery

	//template GET method
	r.GET("/ping", func(c *gin.Context) {
		c.JSON(http.StatusOK, gin.H{
			"message": "pong",
		})
	})

	grpcClients, err := clients.NewGrpcClients(cfg)
	if err != nil {
		panic(err)
	}

	defer grpcClients.Close()

	h := handlers.Handler{
		GrpcClients: grpcClients,
	}

	v1 := r.Group("/v1")
	{
		v1.Use(MyCORSMiddleware())
		v1.POST("/login", h.Login)

		v1.POST("/order", h.AuthMiddleware("*"), h.CreateOrder)
		v1.GET("/order", h.AuthMiddleware("*"), h.GetOrderList)
		v1.GET("/order/:id", h.AuthMiddleware("*"), h.GetOrderById)

		v1.POST("/category", h.AuthMiddleware("*"), h.CreateCategory)
		v1.GET("/category/:id", h.AuthMiddleware("*"), h.GetCategoryById)
		v1.GET("/category", h.AuthMiddleware("*"), h.GetCategoryList)
		v1.PUT("/category", h.AuthMiddleware("*"), h.UpdateCategory)
		v1.DELETE("/category/:id", h.AuthMiddleware("ADMIN"), h.DeleteCategory)

		v1.POST("/product", h.AuthMiddleware("*"), h.CreateProduct)
		v1.GET("/product/:id", h.AuthMiddleware("*"), h.GetProductById)
		v1.GET("/product", h.AuthMiddleware("*"), h.GetProductList)
		v1.PUT("/product", h.AuthMiddleware("*"), h.UpdateProduct)
		v1.DELETE("/product/:id", h.AuthMiddleware("ADMIN"), h.DeleteProduct)

		v1.POST("/user", h.CreateUser)
		v1.GET("/user/:id", h.GetUserById)
		v1.GET("/user", h.GetUserList)
		v1.PUT("/user", h.UpdateUser)
		v1.DELETE("/user/:id", h.DeleteUser)
	}

	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))
	r.Run(cfg.HTTPPort) // listen and serve on 0.0.0.0:8080 (for windows "localhost:8080")
}

// MyCORSMiddleware ...
func MyCORSMiddleware() gin.HandlerFunc {
	return func(c *gin.Context) {
		log.Println("MyCORSMiddleware...")

		c.Header("Access-Control-Allow-Origin", "*")
		c.Header("Access-Control-Allow-Credentials", "true")
		c.Header("Access-Control-Allow-Methods", "POST, OPTIONS, GET, PUT, PATCH, DELETE")
		c.Header("Access-Control-Allow-Headers", "Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization, accept, origin, Cache-Control, X-Requested-With")
		c.Header("Access-Control-Max-Age", "3600")

		if c.Request.Method == "OPTIONS" {
			c.AbortWithStatus(204)
			return
		}

		c.Next()
	}
}
